#! /bin/sh
### BEGIN INIT INFO
# Provides:          plumage
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Plumage server
# Description:       Plumage Polygraph frontend server
### END INIT INFO

# Author: Philip Boulain <philip.boulain@smoothwall.net>

# Make copies of this init script named plumage-(role) where (role) is one of
# 'ui', 'master', 'client', or 'server', e.g. 'plumage-ui'.
# You may want/need to adjust the ports and users below.
PLUMAGE_ROLE=""
echo "$0" | grep -q 'ui$'     && PLUMAGE_ROLE="UI"
echo "$0" | grep -q 'master$' && PLUMAGE_ROLE="Master"
echo "$0" | grep -q 'client$' && PLUMAGE_ROLE="Client"
echo "$0" | grep -q 'server$' && PLUMAGE_ROLE="Server"
if [ -z "$PLUMAGE_ROLE" ]; then
	echo "Plumage init script '$0' incorrectly named; cannot deduce role" >&2
	exit 1
fi
PLUMAGE_ROLE_UNIXY=$(echo "$PLUMAGE_ROLE | tr 'A-Z' 'a-z'")

# Default defaults
PLUMAGE_PORT_UI=80
PLUMAGE_PORT_MASTER=5001
PLUMAGE_PORT_CLIENT=5002
PLUMAGE_PORT_SERVER=5003

# Read configuration variable file if it is present
NAME=plumage-${PLUMAGE_ROLE_UNIXY}
[ -r "/etc/default/$NAME" ] && . "/etc/default/$NAME"

# Do nothing if disabled.
# The reason for the negated flag is so we work without a defaults file.
[ -n "$PLUMAGE_DISABLE" ] && exit 0

if [ -z "$PLUMAGE_PORT" ]; then
	[ "$PLUMAGE_ROLE" = "UI"     ] && PLUMAGE_PORT="$PLUMAGE_PORT_UI"
	[ "$PLUMAGE_ROLE" = "Master" ] && PLUMAGE_PORT="$PLUMAGE_PORT_MASTER"
	[ "$PLUMAGE_ROLE" = "Client" ] && PLUMAGE_PORT="$PLUMAGE_PORT_CLIENT"
	[ "$PLUMAGE_ROLE" = "Server" ] && PLUMAGE_PORT="$PLUMAGE_PORT_SERVER"
fi

[ -z "$PLUMAGE_USER" ] && PLUMAGE_USER=plumage-${PLUMAGE_ROLE_UNIXY}

[ -z "$PLUMAGE_GROUP" ] && PLUMAGE_GROUP=nogroup

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/opt/plumage/Plumage${PLUMAGE_ROLE}/bin
DESC="Plumage $PLUMAGE_ROLE server"
PIDFILE=/var/run/plumage-${PLUMAGE_ROLE_UNIXY}.pid
LOGFILE=/var/log/plumage-${PLUMAGE_ROLE_UNIXY}.log
RUNPATH=/run/plumage
DAEMON=/usr/bin/starman
DAEMON_ARGS="--listen :${PLUMAGE_PORT} --user ${PLUMAGE_USER} --group ${PLUMAGE_GROUP} --pid ${PIDFILE} --daemonize --error-log ${LOGFILE} bin/app.pl"
SSD_ARGS="--chdir /opt/plumage/Plumage${PLUMAGE_ROLE}"
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	mkdir -p "$RUNPATH" || exit 2
	chown "${PLUMAGE_USER}:${PLUMAGE_GROUP}" "$RUNPATH" || exit 2

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	# --exec does not work, since starman runs under an interpreter and renames itself
	start-stop-daemon $SSD_ARGS --start --quiet --pidfile "$PIDFILE" \
		--startas "$DAEMON" --test > /dev/null \
		|| return 1
	start-stop-daemon $SSD_ARGS --start --quiet --pidfile "$PIDFILE" \
		--startas "$DAEMON" -- $DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	# --name doesn't work here any better than --exec does
	start-stop-daemon --stop --quiet --retry=INT/10/TERM/10/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Debian's "Wait for children to finish too if this is a daemon that
	# forks..." logic cannot be applied because only the pidfile works as a
	# matching mechanism.
	# Many daemons don't delete their pidfiles when they exit.
	# (Starman creates its as root, then drops priviledges...)
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
